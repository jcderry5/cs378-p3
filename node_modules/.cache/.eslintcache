[{"/Users/jalynderry/Desktop/UT/Sp23/hci/Practice Problems/p3/cs378-p3/src/index.js":"1","/Users/jalynderry/Desktop/UT/Sp23/hci/Practice Problems/p3/cs378-p3/src/App.js":"2","/Users/jalynderry/Desktop/UT/Sp23/hci/Practice Problems/p3/cs378-p3/src/reportWebVitals.js":"3"},{"size":549,"mtime":1677513750173,"results":"4","hashOfConfig":"5"},{"size":8640,"mtime":1678729492903,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1677473627674,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"o5v1o4",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"/Users/jalynderry/Desktop/UT/Sp23/hci/Practice Problems/p3/cs378-p3/src/index.js",[],[],[],"/Users/jalynderry/Desktop/UT/Sp23/hci/Practice Problems/p3/cs378-p3/src/App.js",["19","20","21","22","23","24","25"],[],"import './App.css';\nimport React from 'react';\nimport { useState, useEffect } from 'react';\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged } from \"firebase/auth\";\nimport { getDatabase, ref, set, child, get } from \"firebase/database\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAa-Z0hmWUeCMZWsuxWb_VPamalA0IKPBU\",\n  authDomain: \"hcifirebase-d373a.firebaseapp.com\",\n  databaseURL: \"https://hcifirebase-d373a-default-rtdb.firebaseio.com\",\n  projectId: \"hcifirebase-d373a\",\n  storageBucket: \"hcifirebase-d373a.appspot.com\",\n  messagingSenderId: \"1051593364533\",\n  appId: \"1:1051593364533:web:3d962938b430742309cd7c\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n// Initialize Firebase Authentication and get a reference to the service\nconst auth = getAuth(app);\n// Initialize Realtime Database and get a reference to the service\nconst database = getDatabase(app);\n\n\n\nexport default function WeatherApp() {\n  const BASE_ATX_URL = \"https://api.open-meteo.com/v1/forecast?latitude=30.27&longitude=-97.74&hourly=temperature_2m\"\n  const BASE_DAL_URL = \"https://api.open-meteo.com/v1/forecast?latitude=32.78&longitude=-96.81&hourly=temperature_2m\"\n  const GEO_CODING_STUB = \"https://geocoding-api.open-meteo.com/v1/search?name=\"\n  const [time, setTime] = useState([]);\n  const [temp, setTemp] = useState([]);\n  const [user, setUser] = useState([]);\n  const [userId, setUserId] = useState([]);\n  const [currentURL, setCurrentURL] = useState([]);\n  const [currentCityName, setCurrentCityName] = useState([]);\n  let displayData\n  \n\n  async function pullJson(URL) {\n    setCurrentURL(URL)\n    const response = await fetch(URL)\n    const responseData = await response.json()\n    let timeArr = responseData.hourly.time\n    let tempArr = responseData.hourly.temperature_2m\n    setTime(timeArr);\n    setTemp(tempArr);\n  }\n\n  useEffect(() => {\n    pullJson(BASE_ATX_URL)\n    setCurrentCityName(\"Austin\")\n    let cityHeader = document.getElementById(\"currentCityHeader\");\n    cityHeader.innerText = currentCityName\n  }, []);\n\n  useEffect(() => {\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        setUser(user)\n        setUserId(user.uid)\n      } else {\n        setUser(null)\n      }\n    });\n  })\n  \n  function onClickLocal() {\n    const dbRef = ref(getDatabase());\n    // Get the URL\n    get(child(dbRef, `users/${userId}/URL`)).then((snapshot) => {\n      if (snapshot.exists()) {\n        pullJson(snapshot.val());\n      } else {\n        console.log(\"No data available\");\n      }\n    }).catch((error) => {\n      alert(error);\n    });\n\n    // Get the City Name\n    get(child(dbRef, `users/${userId}/CityName`)).then((snapshot) => {\n      if (snapshot.exists()) {\n        let cityHeader = document.getElementById(\"currentCityHeader\");\n        cityHeader.innerText = snapshot.val()\n      } else {\n        console.log(\"No data available\");\n      }\n    }).catch((error) => {\n      alert(error);\n    });\n    \n  }\n\n  function onClickATX() {\n    setCurrentCityName(\"Austin\")\n    pullJson(BASE_ATX_URL)\n    let cityHeader = document.getElementById(\"currentCityHeader\");\n    cityHeader.innerText = \"Austin\"\n  }\n\n  function onClickDAL() {\n    pullJson(BASE_DAL_URL)\n    setCurrentCityName(\"Dallas\")\n    let cityHeader = document.getElementById(\"currentCityHeader\");\n    cityHeader.innerText = \"Dallas\"\n  }\n\n  return (<>\n    <div class=\"container\">\n      <AuthHeader />\n      <ThreeCityButtons />\n      <CityInput />\n      <CurrentCityHeader />\n      <ForecastHeader />\n      < DataSet />\n    </div>\n  </>)\n\n  function CityInput() {\n    return (\n      <div>\n        <input type=\"text\" id=\"searchCity\" name=\"city\" placeholder=\"Input City Name\" />\n        <button id=\"searchCityBtn\" onClick={() => getCustomCity()}> Get Weather </button>\n      </div>\n    )\n  }\n\n  function getCustomCity() {\n    const inputCity = document.getElementById(\"searchCity\").value\n    setCurrentCityName(inputCity)\n    let cityHeader = document.getElementById(\"currentCityHeader\");\n    cityHeader.innerText = inputCity\n    let encodedCityName = encodeURI(inputCity)\n    const CUSTOM_URL = GEO_CODING_STUB + encodedCityName\n    pullCustomJson(CUSTOM_URL)\n  }\n\n  async function pullCustomJson(URL) {\n    const response = await fetch(URL)\n    const responseData = await response.json()\n    if (responseData.results != null) {\n      let lat = responseData.results[0].latitude\n      let long = responseData.results[0].longitude\n      buildCustomJsonURL(long, lat)\n    } else {\n      alert (\"Not a Valid City\")\n    }\n  }\n\n  function buildCustomJsonURL(long, lat) {\n    const beginningURL = \"https://api.open-meteo.com/v1/forecast?latitude=\"\n    const middleURL = \"&longitude=\"\n    const endURL = \"&hourly=temperature_2m&temperature_unit=fahrenheit\"\n    const CUSTOM_URL = beginningURL + lat + middleURL + long + endURL\n    pullJson(CUSTOM_URL)\n  }\n\n  function AuthHeader() {\n    return (\n      <div class=\"row\">\n        <div class=\"col-6\">\n            <button class=\"auth-btn\" id=\"login-btn\" onClick={onClickLogin}> <b> Log In </b></button>\n          </div>\n        <div class=\"col-6\">\n          <button class=\"auth-btn\" id=\"logout-btn\" onClick={onClickLogout}> <b> Log Out </b></button>\n        </div>\n      </div>\n    )\n  }\n\n  function onClickSignup() {\n    let newEmail = prompt(\"Enter your email to signup\")\n    let newPassword = prompt(\"Enter your desired password to signup\")\n    createUserWithEmailAndPassword(auth, newEmail, newPassword)\n      .then((userCredential) => {\n        // Signed in \n        user = userCredential.user;\n        // ...\n      })\n      .catch((error) => {\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        alert(errorMessage)\n      });\n  }\n\n  function onClickLogin() {\n    let email = prompt(\"Enter username\")\n    let password = prompt(\"Enter password\")\n    signInWithEmailAndPassword(auth, email, password)\n      .then((userCredential) => {\n        //\n      })\n      .catch((error) => {\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        alert(errorMessage)\n      });\n  }\n\n  function onClickLogout() {\n    if (user) {\n      auth.signOut()\n      .then(function () {\n          console.log('Signed Out');\n      }, function(error) {\n          console.error('Sign Out Error', error);\n    });\n    } else {\n      alert(\"You are not signed in\")\n    }\n    \n  }\n\n  function onClickSetLocalCity() {\n    set(ref(database, 'users/' + userId), {\n      URL: currentURL,\n      CityName: currentCityName\n    });\n  }\n\n  function ThreeCityButtons() {\n    return (\n      <div class=\"row\">\n        <div class=\"col\">\n          <button id=\"LOCAL-btn\" class=\"cityBtn\" onClick={onClickLocal}> <b> Local </b> </button>\n        </div>\n        <div class=\"col\">\n          <button id=\"ATX-btn\" class=\"cityBtn\" onClick={onClickATX}> <b> Austin </b> </button>\n        </div>\n        <div class=\"col\">\n          <button id=\"DAL-btn\" class=\"cityBtn\" onClick={onClickDAL}> <b> Dallas </b> </button>\n        </div>\n      </div>\n    )\n  }\n\n  function CurrentCityHeader() {\n    let cityName = \"\"\n    if (document.getElementById(\"currentCityHeader\") == null) {\n      cityName = \"<Unknown City Name>\"\n    } else {\n      cityName = document.getElementById(\"currentCityHeader\").innerText\n    }\n    return (\n      <div id=\"cityHeader\">\n        Weather for <var id=\"currentCityHeader\"><b>{cityName}</b></var>\n        <button id=\"setLocalCityBtn\" onClick={onClickSetLocalCity}><b>Set Local</b></button>\n      </div>\n    )\n  }\n\n  function ForecastHeader() {\n    return (\n      <div class=\"row forecast\" >\n        <div class=\"col-4\">\n          <b>Time</b>\n        </div>\n        <div class=\"col\">\n          <b>Temperature</b>\n        </div>\n      </div>\n    )\n  }\n\n  function DataRow({ idx }) {\n    let returnValue = ''\n    if (temp.length != 0) {\n      returnValue = (\n        <div class=\"row forecast forecaseData\">\n          <div class=\"col-4\">\n            {time[idx].substring(11)}\n          </div>\n          <div class=\"col\">\n            {temp[idx]} F\n          </div>\n        </div>\n      )\n    } else {\n      returnValue = <p> Nothing populated yet </p>\n    }\n    return (\n      returnValue\n    )\n  }\n\n  function DataSet() {\n    const returnValue = [];\n    for (let i = 8; i < 24; i++) {\n      returnValue.push(<DataRow idx={i} />)\n    }\n    return returnValue\n  }\n  \n}\n","/Users/jalynderry/Desktop/UT/Sp23/hci/Practice Problems/p3/cs378-p3/src/reportWebVitals.js",[],[],{"ruleId":"26","severity":1,"message":"27","line":41,"column":7,"nodeType":"28","messageId":"29","endLine":41,"endColumn":18},{"ruleId":"30","severity":1,"message":"31","line":59,"column":6,"nodeType":"32","endLine":59,"endColumn":8,"suggestions":"33"},{"ruleId":"26","severity":1,"message":"34","line":176,"column":12,"nodeType":"28","messageId":"29","endLine":176,"endColumn":25},{"ruleId":"35","severity":1,"message":"36","line":182,"column":9,"nodeType":"28","messageId":"37","endLine":182,"endColumn":13},{"ruleId":"26","severity":1,"message":"38","line":186,"column":15,"nodeType":"28","messageId":"29","endLine":186,"endColumn":24},{"ruleId":"26","severity":1,"message":"38","line":200,"column":15,"nodeType":"28","messageId":"29","endLine":200,"endColumn":24},{"ruleId":"39","severity":1,"message":"40","line":273,"column":21,"nodeType":"41","messageId":"42","endLine":273,"endColumn":23},"no-unused-vars","'displayData' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentCityName'. Either include it or remove the dependency array.","ArrayExpression",["43"],"'onClickSignup' is defined but never used.","no-const-assign","'user' is constant.","const","'errorCode' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",{"desc":"44","fix":"45"},"Update the dependencies array to be: [currentCityName]",{"range":"46","text":"47"},[2344,2346],"[currentCityName]"]