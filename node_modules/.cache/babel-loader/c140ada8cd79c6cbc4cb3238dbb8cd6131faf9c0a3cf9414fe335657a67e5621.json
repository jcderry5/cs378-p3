{"ast":null,"code":"var _jsxFileName = \"/Users/jalynderry/Desktop/UT/Sp23/hci/p3/p3-app/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WeatherApp() {\n  _s();\n  const BASE_ATX_URL = \"https://api.open-meteo.com/v1/forecast?latitude=30.27&longitude=-97.74&hourly=temperature_2m\";\n  const [temp, setTemp] = useState([]);\n  //let temperatureMap = new Map();\n  let displayData;\n  // function pullJson() {\n  //   fetch(BASE_ATX_URL)\n  //     .then(response => response.json())\n  //     .then(responseData => {\n  //       displayData = makeDict(responseData.hourly)\n  //       //console.log(responseData.hourly.time[0])\n  //       setValue(displayData)\n  //   })\n  //   //return\n  // }\n\n  async function pullJson() {\n    const response = await fetch(BASE_ATX_URL);\n    const responseData = await response.json();\n    console.log(\"Before the print of hourly\");\n    console.log(responseData.hourly);\n    let timeArr = responseData.hourly.time;\n    let tempArr = responseData.hourly.temperature_2m;\n    console.log(timeArr);\n    otherFunction(timeArr, tempArr);\n    console.log({\n      temp\n    });\n    //setTemp(timeArr)\n    //setTemp(responseData.hourly)\n    // let dict = makeDict(responseData.hourly)\n    // console.log(\"Outside of function\")\n    // console.log(dict)\n  }\n\n  function otherFunction(arr1, arr2) {\n    console.log(\"This is arr1\");\n    console.log(arr1);\n    console.log(\"This is array 2\");\n    console.log(arr2);\n    const tempMap = new Map();\n    let i = 0;\n    while (i < 10) {\n      //tempMap.set(arr1[i].substring(12), arr2[i])\n      setTemp(prevTemps => [...prevTemps, {\n        time: arr1[i].substring(12),\n        temperature: arr2[i]\n      }]);\n      i++;\n      // console.log(\"inside while loop with i= \" + i);\n      // console.log({temp})\n    }\n  }\n\n  useEffect(() => {\n    pullJson();\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Hello World \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(DataRow, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Goodbye\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n  function DataRow() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: temps.map(item => {\n        /*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.temperature\n        }, item.time, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(WeatherApp, \"zgFOIVAxFVybb9YyJbPpf6sIXn8=\");\n_c = WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","WeatherApp","_s","BASE_ATX_URL","temp","setTemp","displayData","pullJson","response","fetch","responseData","json","console","log","hourly","timeArr","time","tempArr","temperature_2m","otherFunction","arr1","arr2","tempMap","Map","i","prevTemps","substring","temperature","children","fileName","_jsxFileName","lineNumber","columnNumber","DataRow","temps","map","item","_c","$RefreshReg$"],"sources":["/Users/jalynderry/Desktop/UT/Sp23/hci/p3/p3-app/src/App.js"],"sourcesContent":["import './App.css';\nimport React from 'react';\nimport { useState, useEffect } from 'react';\n\n\nexport default function WeatherApp() {\n  const BASE_ATX_URL = \"https://api.open-meteo.com/v1/forecast?latitude=30.27&longitude=-97.74&hourly=temperature_2m\"\n  const [temp, setTemp] = useState([]);\n  //let temperatureMap = new Map();\n  let displayData\n  // function pullJson() {\n  //   fetch(BASE_ATX_URL)\n  //     .then(response => response.json())\n  //     .then(responseData => {\n  //       displayData = makeDict(responseData.hourly)\n  //       //console.log(responseData.hourly.time[0])\n  //       setValue(displayData)\n  //   })\n  //   //return\n  // }\n\n  async function pullJson() {\n    const response = await fetch(BASE_ATX_URL)\n    const responseData = await response.json()\n    console.log(\"Before the print of hourly\")\n    console.log(responseData.hourly);\n    let timeArr = responseData.hourly.time\n    let tempArr = responseData.hourly.temperature_2m\n    console.log(timeArr)\n    otherFunction(timeArr, tempArr)\n    console.log({temp})\n    //setTemp(timeArr)\n    //setTemp(responseData.hourly)\n    // let dict = makeDict(responseData.hourly)\n    // console.log(\"Outside of function\")\n    // console.log(dict)\n  }\n\n  function otherFunction(arr1, arr2) {\n    console.log(\"This is arr1\")\n    console.log(arr1)\n    console.log(\"This is array 2\")\n    console.log(arr2)\n    const tempMap = new Map();\n    let i = 0;\n    while (i < 10) {\n      //tempMap.set(arr1[i].substring(12), arr2[i])\n      setTemp((prevTemps) => [...prevTemps, {\n          time: arr1[i].substring(12),\n          temperature: arr2[i] }\n      ]);\n      i++;\n      // console.log(\"inside while loop with i= \" + i);\n      // console.log({temp})\n    }\n  }\n  \n  useEffect(() => {\n    pullJson()\n  })\n\n\n  return (<>\n    <h2> Hello World </h2>\n    < DataRow />\n    <h2> Goodbye</h2>\n  </>)\n\n  function DataRow() {\n    return (\n      <div>{\n        temps.map(item => {\n          <p key={item.time}>{item.temperature}</p>\n      })}\n      </div>\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}